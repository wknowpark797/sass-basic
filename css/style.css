@charset "UTF-8";
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

ul,
ol,
li {
  list-style: none;
}

a {
  text-decoration: none;
}

body {
  background: #eee;
}
body .wrap {
  width: 100%;
  padding: 50px;
}
body .wrap::after {
  content: "";
  display: block;
  clear: both;
}
body .wrap .item {
  float: left;
  width: 300px;
  padding: 20px;
  margin: 10px;
  background: #fff;
  border-radius: 10px;
  box-shadow: 5px 5px 20px #ddd;
  transform: translateY(200px);
  opacity: 0;
  transition-property: opacity transform;
  transition-duration: 1s;
  /* 
  &:nth-of-type(1) {
  	transition-delay: 0s;
  }
  &:nth-of-type(2) {
  	transition-delay: 0.2s;
  }
  &:nth-of-type(3) {
  	transition-delay: 0.4s;
  }
  &:nth-of-type(4) {
  	transition-delay: 0.6s;
  } 
  */
}
body .wrap .item:nth-of-type(1) {
  transition-delay: 0s;
}
body .wrap .item:nth-of-type(2) {
  transition-delay: 0.2s;
}
body .wrap .item:nth-of-type(3) {
  transition-delay: 0.4s;
}
body .wrap .item:nth-of-type(4) {
  transition-delay: 0.6s;
}
body .wrap .item:nth-of-type(1) h2 {
  color: #333;
}
body .wrap .item:nth-of-type(2) h2 {
  color: #555;
}
body .wrap .item:nth-of-type(3) h2 {
  color: #777;
}
body .wrap .item:nth-of-type(4) h2 {
  color: #999;
}
body .wrap .item h2 {
  font-family: "arial";
  font-size: 20px;
  color: #333;
  margin-bottom: 15px;
}
body .wrap .item a {
  display: block;
  width: 100px;
  height: 30px;
  background: #555;
  border-radius: 15px;
  text-align: center;
  color: #fff;
  line-height: 30px;
  margin-top: 15px;
}
body .wrap .item.on {
  transform: translateY(0);
  opacity: 1;
}

main {
  width: 100%;
  height: 100vh;
  background: #eee;
  display: flex;
}
main section {
  height: 100%;
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 200px;
  border: 1px solid #000;
  transition: flex 0.5s;
}
main section:hover {
  flex: 2;
}

/*
  [ block 요소의 5가지 특성 ]
  1. 넓이값 미지정시 부모요소 넓이값을 100% 상속
  2. 높이값 미지정시 자식요소의 높이값 총합이 자동 적용
  3. 자동 줄바꿈
  4. 블록요소, 인라인블록, 인라인 요소 모두 감쌀 수 있다.
  5. 기존의 블록요소를 좌우배치 하기 위해서는 float 속성을 활용해야 한다. (자식요소에 적용)

  [ inline-block 요소의 특성 (블록과 인라인 특성을 모두 포함) ]
  - 인라인요소인데 넓이와 높이값 설정이 가능하다.
  - float 처리 없이도 기본적으로 좌우배치가 된다.

  [ flex ]
  - 자식요소가 배치되는 방법을 부모 요소에서 설정
  - 부모요소에 flex를 지정하면 자식 요소는 inline-block 처리된다.
  - flex에는 기본축, 반대축의 개념이 존재한다.
    - 따로 방향을 지정하지 않으면 기본축이 가로, 반대축이 세로
  - flex-direction으로 기본축 변경가능
    - flex-direction: row (기본축을 가로로 변경 - 디폴트 값)
    - flex-direction: column (기본축을 세로로 변경)
  - justify-content: 기본축의 정렬방식을 결정
  - align-content(줄바꿈 요소가 있을 때), align-items(줄바꿈 요소가 없을 때): 반대축의 정렬방식을 결정

  - flex-start: 시작방향 정렬
  - flex-end: 반대방향 정렬
  - center: 가운데 정렬

  - space-between: 양 끝을 좌우로 붙이고 사이 간격을 균등배치
  - space-around: 양 끝도 간격을 균등 배치
  - space-evenly: 양 끝도 중첩된 간격포함 균등 배치

  - flex-wrap: 줄바꿈 속성 적용
    - flex-wrap 적용시에는 align-items가 아닌 align-content 적용

  - gap: 사이간격 설정
*/

/*# sourceMappingURL=style.css.map */
